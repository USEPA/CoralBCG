% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split_mets.R
\name{split_mets}
\alias{split_mets}
\title{Split metrics}
\usage{
split_mets(met_in, splt, bcgs, both = FALSE)
}
\arguments{
\item{met_in}{input \code{data.frame} of coral metrics}

\item{splt}{\code{list} of split values for each metric from 0 to 1}

\item{bcgs}{\code{list} of BCG levels for each metric}

\item{both}{logical if a \code{data.frame} is returned in long format that includes raw and bcg levels fore ach metric}
}
\value{
A \code{data.frame} with metric values converted to BCG levels.  This will have the same dimensions as \code{met_in} unless \code{both = TRUE}. \code{NA} values are returned for non-unique metrics.
}
\description{
Split metrics into BCG levels for calibration
}
\details{
The inputs for \code{splt} and {bcgs} are separate lists where each element is named as a metric in \code{met_in}.  Numeric values for for each elemene tin \code{splt} must be monotonic in the range from and including zero to one.  These values are converted to the scale of each metric for assigning BCG levels.  Numeric values in each element of \code{bcgs} are the BCG levels assigned to each split in \code{splt}, with total length of each element equal to the length of each element in \code{splt} - 1.    

This is splitting into definite, crisp intervals (no fuzzy logic).
}
\examples{
library(dplyr)

# get metrics, number of metrics, and number of bcg levels
met_in <- get_stony_mets(crl_dem) 
nmets <- ncol(met_in) - 1
nbcgs <- 4

# setup splits, these may differ by metric
splt <- rep(seq(0, 1, length = nbcgs + 1), times = nmets) \%>\% 
 matrix(nrow = nbcgs + 1) \%>\% 
 data.frame \%>\% 
 as.list
names(splt) <- names(met_in)[-1]

# setup bcg levels, one minus splts, reverse for bleached, diseased
# this approach can include non-monotonic change
bcgs <- rep(seq(nbcgs + 1, 2), times = nmets) \%>\% 
 matrix(ncol = nmets) \%>\% 
 data.frame
names(bcgs) <- names(met_in)[-1]
bcgs[, names(bcgs) \%in\% c('bleached', 'diseased')] <- seq(2, nbcgs + 1)
bcgs <- as.list(bcgs)

split_mets(met_in, splt = splt, bcgs = bcgs)
}
